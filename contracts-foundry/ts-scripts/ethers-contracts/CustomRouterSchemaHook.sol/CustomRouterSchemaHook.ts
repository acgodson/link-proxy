/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CustomRouterSchemaHookInterface extends utils.Interface {
  functions: {
    "allRequestMessageIds(uint256)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "customRouter()": FunctionFragment;
    "didReceiveAttestation(address,uint64,uint64,bytes)": FunctionFragment;
    "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)": FunctionFragment;
    "didReceiveRevocation(address,uint64,uint64,bytes)": FunctionFragment;
    "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)": FunctionFragment;
    "getPreSubmission(bytes32)": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "preSubmissions(bytes32)": FunctionFragment;
    "spInstance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allRequestMessageIds"
      | "checkUpkeep"
      | "customRouter"
      | "didReceiveAttestation(address,uint64,uint64,bytes)"
      | "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"
      | "didReceiveRevocation(address,uint64,uint64,bytes)"
      | "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"
      | "getPreSubmission"
      | "performUpkeep"
      | "preSubmissions"
      | "spInstance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allRequestMessageIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "customRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,bytes)",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,bytes)",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreSubmission",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preSubmissions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spInstance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allRequestMessageIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spInstance", data: BytesLike): Result;

  events: {};
}

export interface CustomRouterSchemaHook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CustomRouterSchemaHookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allRequestMessageIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    customRouter(overrides?: CallOverrides): Promise<[string]>;

    "didReceiveAttestation(address,uint64,uint64,bytes)"(
      attester: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"(
      attester: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: string,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "didReceiveRevocation(address,uint64,uint64,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: string,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getPreSubmission(
      requestMessageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, BigNumber] & {
        _requestMessageId: string;
        idempotencyKey: string;
        usedTokens: BigNumber;
        payFeesIn: BigNumber;
        sender: string;
        timestamp: BigNumber;
      }
    >;

    performUpkeep(
      performData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    preSubmissions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, BigNumber] & {
        requestMessageId: string;
        idempotencyKey: string;
        usedTokens: BigNumber;
        payFeesIn: BigNumber;
        sender: string;
        timestamp: BigNumber;
      }
    >;

    spInstance(overrides?: CallOverrides): Promise<[string]>;
  };

  allRequestMessageIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  checkUpkeep(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  customRouter(overrides?: CallOverrides): Promise<string>;

  "didReceiveAttestation(address,uint64,uint64,bytes)"(
    attester: string,
    arg1: BigNumberish,
    attestationId: BigNumberish,
    arg3: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"(
    attester: string,
    arg1: BigNumberish,
    attestationId: BigNumberish,
    arg3: string,
    arg4: BigNumberish,
    arg5: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "didReceiveRevocation(address,uint64,uint64,bytes)"(
    arg0: string,
    arg1: BigNumberish,
    attestationId: BigNumberish,
    arg3: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"(
    arg0: string,
    arg1: BigNumberish,
    attestationId: BigNumberish,
    arg3: string,
    arg4: BigNumberish,
    arg5: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  getPreSubmission(
    requestMessageId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string, BigNumber] & {
      _requestMessageId: string;
      idempotencyKey: string;
      usedTokens: BigNumber;
      payFeesIn: BigNumber;
      sender: string;
      timestamp: BigNumber;
    }
  >;

  performUpkeep(
    performData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  preSubmissions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string, BigNumber] & {
      requestMessageId: string;
      idempotencyKey: string;
      usedTokens: BigNumber;
      payFeesIn: BigNumber;
      sender: string;
      timestamp: BigNumber;
    }
  >;

  spInstance(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allRequestMessageIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    customRouter(overrides?: CallOverrides): Promise<string>;

    "didReceiveAttestation(address,uint64,uint64,bytes)"(
      attester: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"(
      attester: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: string,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "didReceiveRevocation(address,uint64,uint64,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: string,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getPreSubmission(
      requestMessageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, BigNumber] & {
        _requestMessageId: string;
        idempotencyKey: string;
        usedTokens: BigNumber;
        payFeesIn: BigNumber;
        sender: string;
        timestamp: BigNumber;
      }
    >;

    performUpkeep(
      performData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    preSubmissions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, BigNumber] & {
        requestMessageId: string;
        idempotencyKey: string;
        usedTokens: BigNumber;
        payFeesIn: BigNumber;
        sender: string;
        timestamp: BigNumber;
      }
    >;

    spInstance(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    allRequestMessageIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpkeep(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    customRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "didReceiveAttestation(address,uint64,uint64,bytes)"(
      attester: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"(
      attester: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: string,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "didReceiveRevocation(address,uint64,uint64,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: string,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPreSubmission(
      requestMessageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performUpkeep(
      performData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    preSubmissions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spInstance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allRequestMessageIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "didReceiveAttestation(address,uint64,uint64,bytes)"(
      attester: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "didReceiveAttestation(address,uint64,uint64,address,uint256,bytes)"(
      attester: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: string,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "didReceiveRevocation(address,uint64,uint64,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "didReceiveRevocation(address,uint64,uint64,address,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      attestationId: BigNumberish,
      arg3: string,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPreSubmission(
      requestMessageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    preSubmissions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spInstance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
