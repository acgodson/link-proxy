/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Client {
  export type EVMTokenAmountStruct = { token: string; amount: BigNumberish };

  export type EVMTokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    string,
    BigNumber,
    string,
    string,
    Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: BigNumber;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export interface ControllerInterface extends utils.Interface {
  functions: {
    "authorizedRouters(address)": FunctionFragment;
    "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": FunctionFragment;
    "cleanUpExpiredKeys(bytes32[])": FunctionFragment;
    "expirationPeriod()": FunctionFragment;
    "getIdempotencyData(bytes32)": FunctionFragment;
    "getRouter()": FunctionFragment;
    "idempotencyKeys(bytes32)": FunctionFragment;
    "registerRouter(address)": FunctionFragment;
    "requestHashToKey(bytes32)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "submitReceipt(bytes32,address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorizedRouters"
      | "ccipReceive"
      | "cleanUpExpiredKeys"
      | "expirationPeriod"
      | "getIdempotencyData"
      | "getRouter"
      | "idempotencyKeys"
      | "registerRouter"
      | "requestHashToKey"
      | "setVault"
      | "submitReceipt"
      | "supportsInterface"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizedRouters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanUpExpiredKeys",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "expirationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdempotencyData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "idempotencyKeys",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestHashToKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitReceipt",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "authorizedRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanUpExpiredKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdempotencyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idempotencyKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestHashToKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "KeyGenerated(bytes32,address,uint64,address)": EventFragment;
    "ReceiptSubmitted(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeyGenerated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiptSubmitted"): EventFragment;
}

export interface KeyGeneratedEventObject {
  idempotencyKey: string;
  proxy: string;
  sourceChainSelector: BigNumber;
  sourceAddress: string;
}
export type KeyGeneratedEvent = TypedEvent<
  [string, string, BigNumber, string],
  KeyGeneratedEventObject
>;

export type KeyGeneratedEventFilter = TypedEventFilter<KeyGeneratedEvent>;

export interface ReceiptSubmittedEventObject {
  idempotencyKey: string;
  token: string;
  usedTokens: BigNumber;
}
export type ReceiptSubmittedEvent = TypedEvent<
  [string, string, BigNumber],
  ReceiptSubmittedEventObject
>;

export type ReceiptSubmittedEventFilter =
  TypedEventFilter<ReceiptSubmittedEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ccipReceive(
      message: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cleanUpExpiredKeys(
      keys: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    expirationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIdempotencyData(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, BigNumber] & {
        proxy: string;
        predictedTokenUsage: number;
        processed: boolean;
        expirationTime: BigNumber;
      }
    >;

    getRouter(overrides?: CallOverrides): Promise<[string]>;

    idempotencyKeys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, BigNumber] & {
        proxy: string;
        predictedTokenUsage: number;
        processed: boolean;
        expirationTime: BigNumber;
      }
    >;

    registerRouter(
      router: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestHashToKey(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitReceipt(
      idempotencyKey: BytesLike,
      token: string,
      usedTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  authorizedRouters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  ccipReceive(
    message: Client.Any2EVMMessageStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cleanUpExpiredKeys(
    keys: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  expirationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getIdempotencyData(
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean, BigNumber] & {
      proxy: string;
      predictedTokenUsage: number;
      processed: boolean;
      expirationTime: BigNumber;
    }
  >;

  getRouter(overrides?: CallOverrides): Promise<string>;

  idempotencyKeys(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean, BigNumber] & {
      proxy: string;
      predictedTokenUsage: number;
      processed: boolean;
      expirationTime: BigNumber;
    }
  >;

  registerRouter(
    router: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestHashToKey(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  setVault(
    _vault: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitReceipt(
    idempotencyKey: BytesLike,
    token: string,
    usedTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    authorizedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ccipReceive(
      message: Client.Any2EVMMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cleanUpExpiredKeys(
      keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    expirationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getIdempotencyData(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, BigNumber] & {
        proxy: string;
        predictedTokenUsage: number;
        processed: boolean;
        expirationTime: BigNumber;
      }
    >;

    getRouter(overrides?: CallOverrides): Promise<string>;

    idempotencyKeys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, BigNumber] & {
        proxy: string;
        predictedTokenUsage: number;
        processed: boolean;
        expirationTime: BigNumber;
      }
    >;

    registerRouter(router: string, overrides?: CallOverrides): Promise<void>;

    requestHashToKey(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    submitReceipt(
      idempotencyKey: BytesLike,
      token: string,
      usedTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "KeyGenerated(bytes32,address,uint64,address)"(
      idempotencyKey?: BytesLike | null,
      proxy?: null,
      sourceChainSelector?: null,
      sourceAddress?: null
    ): KeyGeneratedEventFilter;
    KeyGenerated(
      idempotencyKey?: BytesLike | null,
      proxy?: null,
      sourceChainSelector?: null,
      sourceAddress?: null
    ): KeyGeneratedEventFilter;

    "ReceiptSubmitted(bytes32,address,uint256)"(
      idempotencyKey?: BytesLike | null,
      token?: null,
      usedTokens?: null
    ): ReceiptSubmittedEventFilter;
    ReceiptSubmitted(
      idempotencyKey?: BytesLike | null,
      token?: null,
      usedTokens?: null
    ): ReceiptSubmittedEventFilter;
  };

  estimateGas: {
    authorizedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ccipReceive(
      message: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cleanUpExpiredKeys(
      keys: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    expirationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getIdempotencyData(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouter(overrides?: CallOverrides): Promise<BigNumber>;

    idempotencyKeys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRouter(
      router: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requestHashToKey(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitReceipt(
      idempotencyKey: BytesLike,
      token: string,
      usedTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ccipReceive(
      message: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cleanUpExpiredKeys(
      keys: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    expirationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIdempotencyData(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idempotencyKeys(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRouter(
      router: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestHashToKey(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitReceipt(
      idempotencyKey: BytesLike,
      token: string,
      usedTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
