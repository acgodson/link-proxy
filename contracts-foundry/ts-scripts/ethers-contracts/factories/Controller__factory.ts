/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Controller, ControllerInterface } from "../Controller";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "router",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "authorizedRouters",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ccipReceive",
    inputs: [
      {
        name: "message",
        type: "tuple",
        internalType: "struct Client.Any2EVMMessage",
        components: [
          {
            name: "messageId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "sourceChainSelector",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "sender",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "destTokenAmounts",
            type: "tuple[]",
            internalType: "struct Client.EVMTokenAmount[]",
            components: [
              {
                name: "token",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "cleanUpExpiredKeys",
    inputs: [
      {
        name: "keys",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "expirationPeriod",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getIdempotencyData",
    inputs: [
      {
        name: "key",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "proxy",
        type: "address",
        internalType: "address",
      },
      {
        name: "predictedTokenUsage",
        type: "uint8",
        internalType: "enum Controller.OperationType",
      },
      {
        name: "processed",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "expirationTime",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRouter",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "idempotencyKeys",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "proxy",
        type: "address",
        internalType: "address",
      },
      {
        name: "predictedTokenUsage",
        type: "uint8",
        internalType: "enum Controller.OperationType",
      },
      {
        name: "processed",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "expirationTime",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "registerRouter",
    inputs: [
      {
        name: "router",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "requestHashToKey",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setVault",
    inputs: [
      {
        name: "_vault",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "submitReceipt",
    inputs: [
      {
        name: "idempotencyKey",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "usedTokens",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "vault",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ControllerVault",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "KeyGenerated",
    inputs: [
      {
        name: "idempotencyKey",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "proxy",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "sourceChainSelector",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
      {
        name: "sourceAddress",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ReceiptSubmitted",
    inputs: [
      {
        name: "idempotencyKey",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "token",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "usedTokens",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidRouter",
    inputs: [
      {
        name: "router",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x60a06040526201518060005534801561001757600080fd5b50604051610f18380380610f1883398101604081905261003691610077565b806001600160a01b038116610065576040516335fdcccd60e21b81526000600482015260240160405180910390fd5b6001600160a01b0316608052506100a7565b60006020828403121561008957600080fd5b81516001600160a01b03811681146100a057600080fd5b9392505050565b608051610e4f6100c9600039600081816102c401526104d90152610e4f6000f3fe6080604052600436106100c65760003560e01c80638897cad31161007f578063b0f479a111610059578063b0f479a1146102b5578063ceb1a55b146102fc578063dbd7761e1461031c578063fbfa77cf1461034957600080fd5b80638897cad31461020d5780639e6f1f6614610231578063a83cf62d1461026157600080fd5b806301ffc9a7146100d257806322b19af714610107578063399bd8231461014857806352edc576146101ad5780636817031b146101cd57806385572ffb146101ed57600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100f26100ed366004610864565b610369565b60405190151581526020015b60405180910390f35b34801561011357600080fd5b506101466101223660046108aa565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b005b34801561015457600080fd5b5061019d6101633660046108c7565b600360205260009081526040902080546001909101546001600160a01b0382169160ff600160a01b8204811692600160a81b909204169084565b6040516100fe94939291906108f6565b3480156101b957600080fd5b506101466101c836600461093f565b6103a0565b3480156101d957600080fd5b506101466101e83660046108aa565b61045f565b3480156101f957600080fd5b50610146610208366004610977565b6104ce565b34801561021957600080fd5b5061022360005481565b6040519081526020016100fe565b34801561023d57600080fd5b506100f261024c3660046108aa565b60026020526000908152604090205460ff1681565b34801561026d57600080fd5b5061019d61027c3660046108c7565b600090815260036020526040902080546001909101546001600160a01b0382169260ff600160a01b8404811693600160a81b9004169190565b3480156102c157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016100fe565b34801561030857600080fd5b506101466103173660046109b2565b61052d565b34801561032857600080fd5b506102236103373660046108c7565b60046020526000908152604090205481565b34801561035557600080fd5b506001546102e4906001600160a01b031681565b60006001600160e01b031982166385572ffb60e01b148061039a57506001600160e01b031982166301ffc9a760e01b145b92915050565b60008381526003602052604090208054600160a81b900460ff16156104045760405162461bcd60e51b815260206004820152601560248201527412d95e48185b1c9958591e481c1c9bd8d95cdcd959605a1b60448201526064015b60405180910390fd5b805460ff60a81b1916600160a81b178155604080516001600160a01b03851681526020810184905285917fe86805a29ea436a5ac04036d59a19f9fcd11f5c24fb23ae6943ac7e4a4d760d0910160405180910390a250505050565b6001546001600160a01b0316156104ac5760405162461bcd60e51b815260206004820152601160248201527015985d5b1d08185b1c9958591e481cd95d607a1b60448201526064016103fb565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610519576040516335fdcccd60e21b81523360048201526024016103fb565b61052a61052582610c02565b6105ac565b50565b60005b818110156105a757600083838381811061054c5761054c610caf565b905060200201359050426003600083815260200190815260200160002060010154101561059457600081815260036020526040812080546001600160b01b0319168155600101555b508061059f81610cdb565b915050610530565b505050565b60008082606001518060200190518101906105c79190610cf4565b909250905060008260018111156105e0576105e06108e0565b0361060b576105a781846020015185604001518060200190518101906106069190610d9c565b61064a565b60405162461bcd60e51b81526020600482015260146024820152732ab739bab83837b93a32b210333ab731ba34b7b760611b60448201526064016103fb565b600080600080868060200190518101906106649190610db9565b6040516bffffffffffffffffffffffff19606086901b16602082015260348101849052605481018290529397509195509350915060009060740160408051808303601f19018152918152815160209283012060008181526003909352912054909150600160a81b900460ff16156107155760405162461bcd60e51b815260206004820152601560248201527412d95e48185b1c9958591e481c1c9bd8d95cdcd959605a1b60448201526064016103fb565b6040518060800160405280866001600160a01b03168152602001846002811115610741576107416108e0565b81526020016000151581526020016000544261075d9190610e06565b90526000828152600360209081526040909120825181546001600160a01b039091166001600160a01b031982168117835592840151919283916001600160a81b03191617600160a01b8360028111156107b8576107b86108e0565b02179055506040828101518254901515600160a81b0260ff60a81b19909116178255606090920151600190910155600085815260046020528190208290555181907f2713815904d56b87050af49c28227c58a557bbff29d4ea1b95a0d024c6ca73db906108529088908b908b906001600160a01b03938416815267ffffffffffffffff929092166020830152909116604082015260600190565b60405180910390a25050505050505050565b60006020828403121561087657600080fd5b81356001600160e01b03198116811461088e57600080fd5b9392505050565b6001600160a01b038116811461052a57600080fd5b6000602082840312156108bc57600080fd5b813561088e81610895565b6000602082840312156108d957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0385168152608081016003851061092457634e487b7160e01b600052602160045260246000fd5b60208201949094529115156040830152606090910152919050565b60008060006060848603121561095457600080fd5b83359250602084013561096681610895565b929592945050506040919091013590565b60006020828403121561098957600080fd5b813567ffffffffffffffff8111156109a057600080fd5b820160a0818503121561088e57600080fd5b600080602083850312156109c557600080fd5b823567ffffffffffffffff808211156109dd57600080fd5b818501915085601f8301126109f157600080fd5b813581811115610a0057600080fd5b8660208260051b8501011115610a1557600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610a6057610a60610a27565b60405290565b60405160a0810167ffffffffffffffff81118282101715610a6057610a60610a27565b604051601f8201601f1916810167ffffffffffffffff81118282101715610ab257610ab2610a27565b604052919050565b803567ffffffffffffffff81168114610ad257600080fd5b919050565b600067ffffffffffffffff821115610af157610af1610a27565b50601f01601f191660200190565b600082601f830112610b1057600080fd5b8135610b23610b1e82610ad7565b610a89565b818152846020838601011115610b3857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610b6657600080fd5b8135602067ffffffffffffffff821115610b8257610b82610a27565b610b90818360051b01610a89565b82815260069290921b84018101918181019086841115610baf57600080fd5b8286015b84811015610bf75760408189031215610bcc5760008081fd5b610bd4610a3d565b8135610bdf81610895565b81528185013585820152835291830191604001610bb3565b509695505050505050565b600060a08236031215610c1457600080fd5b610c1c610a66565b82358152610c2c60208401610aba565b6020820152604083013567ffffffffffffffff80821115610c4c57600080fd5b610c5836838701610aff565b60408401526060850135915080821115610c7157600080fd5b610c7d36838701610aff565b60608401526080850135915080821115610c9657600080fd5b50610ca336828601610b55565b60808301525092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610ced57610ced610cc5565b5060010190565b60008060408385031215610d0757600080fd5b825160028110610d1657600080fd5b8092505060208084015167ffffffffffffffff811115610d3557600080fd5b8401601f81018613610d4657600080fd5b8051610d54610b1e82610ad7565b8181528784838501011115610d6857600080fd5b60005b82811015610d86578381018501518282018601528401610d6b565b5060009181019093015250919491935090915050565b600060208284031215610dae57600080fd5b815161088e81610895565b60008060008060808587031215610dcf57600080fd5b8451610dda81610895565b60208601516040870151919550935060038110610df657600080fd5b6060959095015193969295505050565b8082018082111561039a5761039a610cc556fea26469706673582212207dca632fe60f0ee35e6db669eb21bfafb34f104ff465b5440a058a30918c5fda64736f6c63430008140033";

type ControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Controller__factory extends ContractFactory {
  constructor(...args: ControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    router: string,
    overrides?: Overrides & { from?: string }
  ): Promise<Controller> {
    return super.deploy(router, overrides || {}) as Promise<Controller>;
  }
  override getDeployTransaction(
    router: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(router, overrides || {});
  }
  override attach(address: string): Controller {
    return super.attach(address) as Controller;
  }
  override connect(signer: Signer): Controller__factory {
    return super.connect(signer) as Controller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ControllerInterface {
    return new utils.Interface(_abi) as ControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Controller {
    return new Contract(address, _abi, signerOrProvider) as Controller;
  }
}
