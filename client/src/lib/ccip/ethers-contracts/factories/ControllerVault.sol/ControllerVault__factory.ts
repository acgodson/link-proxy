/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ControllerVault,
  ControllerVaultInterface,
} from "../../ControllerVault.sol/ControllerVault";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "router",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "ccipReceive",
    inputs: [
      {
        name: "message",
        type: "tuple",
        internalType: "struct Client.Any2EVMMessage",
        components: [
          {
            name: "messageId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "sourceChainSelector",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "sender",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "destTokenAmounts",
            type: "tuple[]",
            internalType: "struct Client.EVMTokenAmount[]",
            components: [
              {
                name: "token",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "controller",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRouter",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "routerDeposits",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setController",
    inputs: [
      {
        name: "_controller",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "event",
    name: "PaymentProcessed",
    inputs: [
      {
        name: "requestMessageID",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "depositorRouter",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidRouter",
    inputs: [
      {
        name: "router",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610d3e380380610d3e83398101604081905261002f91610070565b806001600160a01b03811661005e576040516335fdcccd60e21b81526000600482015260240160405180910390fd5b6001600160a01b0316608052506100a0565b60006020828403121561008257600080fd5b81516001600160a01b038116811461009957600080fd5b9392505050565b608051610c7d6100c16000396000818160b9015261017f0152610c7d6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a71461006757806385572ffb1461008f57806392eefe9b146100a4578063b0f479a1146100b7578063f77c4791146100f1578063fec825b814610104575b600080fd5b61007a6100753660046107d2565b61013d565b60405190151581526020015b60405180910390f35b6100a261009d366004610803565b610174565b005b6100a26100b2366004610853565b6101d8565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610086565b6000546100d9906001600160a01b031681565b61012f610112366004610870565b600160209081526000928352604080842090915290825290205481565b604051908152602001610086565b60006001600160e01b031982166385572ffb60e01b148061016e57506001600160e01b031982166301ffc9a760e01b145b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101c4576040516335fdcccd60e21b81523360048201526024015b60405180910390fd5b6101d56101d082610a76565b61024c565b50565b6000546001600160a01b03161561022a5760405162461bcd60e51b815260206004820152601660248201527510dbdb9d1c9bdb1b195c88185b1c9958591e481cd95d60521b60448201526064016101bb565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03166102995760405162461bcd60e51b815260206004820152601260248201527110dbdb9d1c9bdb1b195c881b9bdd081cd95d60721b60448201526064016101bb565b600080600080600085606001518060200190518101906102b99190610b23565b945094509450945094508560800151516001146103185760405162461bcd60e51b815260206004820152601960248201527f4578706563746564203120746f6b656e207472616e736665720000000000000060448201526064016101bb565b6000866080015160008151811061033157610331610b7b565b60200260200101516000015190506000876080015160008151811061035857610358610b7b565b6020026020010151602001519050836001600160a01b0316826001600160a01b0316146103b85760405162461bcd60e51b815260206004820152600e60248201526d0a8ded6cadc40dad2e6dac2e8c6d60931b60448201526064016101bb565b828110156104085760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e7420746f6b656e732072656365697665640000000060448201526064016101bb565b600054604051632976e2bb60e11b8152600481018790526001600160a01b03868116602483015260448201869052909116906352edc57690606401600060405180830381600087803b15801561045d57600080fd5b505af1158015610471573d6000803e3d6000fd5b505050506001600160a01b038781166000908152600160209081526040808320938816835292905290812080548592906104ac908490610b91565b90915550506000546104cb906001600160a01b03868116911685610519565b866001600160a01b0316867fcd3622557a5d425240d35ce75b6f470723b3dc9e58ec7305870633318af13ad58560405161050791815260200190565b60405180910390a35050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261056b908490610570565b505050565b60006105c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106429092919063ffffffff16565b80519091501561056b57808060200190518101906105e39190610bb2565b61056b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101bb565b60606106518484600085610659565b949350505050565b6060824710156106ba5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101bb565b600080866001600160a01b031685876040516106d69190610bf8565b60006040518083038185875af1925050503d8060008114610713576040519150601f19603f3d011682016040523d82523d6000602084013e610718565b606091505b509150915061072987838387610734565b979650505050505050565b606083156107a357825160000361079c576001600160a01b0385163b61079c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101bb565b5081610651565b61065183838151156107b85781518083602001fd5b8060405162461bcd60e51b81526004016101bb9190610c14565b6000602082840312156107e457600080fd5b81356001600160e01b0319811681146107fc57600080fd5b9392505050565b60006020828403121561081557600080fd5b813567ffffffffffffffff81111561082c57600080fd5b820160a081850312156107fc57600080fd5b6001600160a01b03811681146101d557600080fd5b60006020828403121561086557600080fd5b81356107fc8161083e565b6000806040838503121561088357600080fd5b823561088e8161083e565b9150602083013561089e8161083e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156108e2576108e26108a9565b60405290565b60405160a0810167ffffffffffffffff811182821017156108e2576108e26108a9565b604051601f8201601f1916810167ffffffffffffffff81118282101715610934576109346108a9565b604052919050565b803567ffffffffffffffff8116811461095457600080fd5b919050565b600082601f83011261096a57600080fd5b813567ffffffffffffffff811115610984576109846108a9565b610997601f8201601f191660200161090b565b8181528460208386010111156109ac57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126109da57600080fd5b8135602067ffffffffffffffff8211156109f6576109f66108a9565b610a04818360051b0161090b565b82815260069290921b84018101918181019086841115610a2357600080fd5b8286015b84811015610a6b5760408189031215610a405760008081fd5b610a486108bf565b8135610a538161083e565b81528185013585820152835291830191604001610a27565b509695505050505050565b600060a08236031215610a8857600080fd5b610a906108e8565b82358152610aa06020840161093c565b6020820152604083013567ffffffffffffffff80821115610ac057600080fd5b610acc36838701610959565b60408401526060850135915080821115610ae557600080fd5b610af136838701610959565b60608401526080850135915080821115610b0a57600080fd5b50610b17368286016109c9565b60808301525092915050565b600080600080600060a08688031215610b3b57600080fd5b8551610b468161083e565b8095505060208601519350604086015192506060860151610b668161083e565b80925050608086015190509295509295909350565b634e487b7160e01b600052603260045260246000fd5b8082018082111561016e57634e487b7160e01b600052601160045260246000fd5b600060208284031215610bc457600080fd5b815180151581146107fc57600080fd5b60005b83811015610bef578181015183820152602001610bd7565b50506000910152565b60008251610c0a818460208701610bd4565b9190910192915050565b6020815260008251806020840152610c33816040850160208701610bd4565b601f01601f1916919091016040019291505056fea26469706673582212205b94d5effacb4fe841bb4b84650f6b302cca07710549a189e84540a2ebfaace264736f6c63430008140033";

type ControllerVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ControllerVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ControllerVault__factory extends ContractFactory {
  constructor(...args: ControllerVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    router: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ControllerVault> {
    return super.deploy(router, overrides || {}) as Promise<ControllerVault>;
  }
  override getDeployTransaction(
    router: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(router, overrides || {});
  }
  override attach(address: string): ControllerVault {
    return super.attach(address) as ControllerVault;
  }
  override connect(signer: Signer): ControllerVault__factory {
    return super.connect(signer) as ControllerVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ControllerVaultInterface {
    return new utils.Interface(_abi) as ControllerVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ControllerVault {
    return new Contract(address, _abi, signerOrProvider) as ControllerVault;
  }
}
